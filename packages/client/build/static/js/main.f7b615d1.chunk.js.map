{"version":3,"sources":["components/messages/Message.js","components/messages/Notification.js","components/messages/Messages.js","components/messages/UserInput.js","App.js","serviceWorker.js","index.js"],"names":["Colors","MessageBox","styled","div","props","isSelf","Message","handle","text","useContext","UserDataContext","selfHandle","style","display","justifyContent","className","NotificationWrapper","Notification","message","MessagesListWrapper","Messages","messages","dummyScroolToBottomRef","useRef","useEffect","current","scrollIntoView","behavior","length","map","index","key","float","clear","ref","UserInputWrapper","InputWrapper","UserInput","onSendMessage","useState","setMessage","value","onKeyPress","event","placeholder","onChange","target","socket","createContext","channel","App","ENDPOINT","setMessages","setSelfHandle","setSelfChannel","io","parsed","queryString","parse","window","location","search","console","log","emit","error","off","on","Provider","callback","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f7b615d1.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { UserDataContext } from '../../App'\r\n\r\nexport const Colors = {\r\n  gray30: '#ccc',\r\n  gray70: '#aaa',\r\n  slefMessageBackgroundColor: '#b8d6f4',\r\n  messageBackgroundColor: '#fff'\r\n}\r\n\r\nconst MessageBox = styled.div`\r\n    padding: 10px;\r\n    background: ${props => props.isSelf ? Colors.slefMessageBackgroundColor : Colors.messageBackgroundColor};\r\n    max-width: 70%;\r\n    margin-bottom: 7px;\r\n    display: flex;\r\n    .hanlde {\r\n        font-size: 0.8em;\r\n        color: ${Colors.gray70}\r\n    }\r\n`\r\n\r\nconst Message = (props) => {\r\n  const {\r\n    handle = '',\r\n    text = ''\r\n  } = props\r\n\r\n  const { selfHandle } = useContext(UserDataContext)\r\n\r\n  const isSelf = handle === selfHandle\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: isSelf ? 'flex-end' : 'flex-start' }}>\r\n      <MessageBox isSelf={isSelf}>\r\n        <div>\r\n          <div />\r\n          <div>\r\n            {\r\n              !isSelf && (\r\n                <div className='hanlde'>\r\n                  {handle}\r\n                </div>\r\n              )\r\n            }\r\n            <div>\r\n              {text}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </MessageBox>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","\r\nimport React from 'react'\r\n\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst NotificationWrapper = styled.div`\r\n    padding: 7px;\r\n    color: #aaa;\r\n`\r\n\r\nconst Notification = props => {\r\n  const {\r\n    message = 'New Event Occured'\r\n  } = props\r\n\r\n  return (\r\n    <NotificationWrapper>\r\n      {message}\r\n    </NotificationWrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","\r\nimport React, { useRef, useEffect } from 'react'\r\nimport Message from './Message'\r\nimport Notification from './Notification'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst MessagesListWrapper = styled.div`\r\n  height: 500px;\r\n  overflow-x: hidden;\r\n  overflow-y: scroll;\r\n`\r\n\r\nconst Messages = props => {\r\n  const {\r\n    messages = []\r\n  } = props\r\n\r\n  const dummyScroolToBottomRef = useRef()\r\n\r\n  useEffect(() => {\r\n    dummyScroolToBottomRef.current.scrollIntoView({ behavior: 'smooth' })\r\n  }, [messages.length])\r\n\r\n  return (\r\n    <div>\r\n      <h1>Messages</h1>\r\n      <MessagesListWrapper>\r\n        {\r\n          messages.map((message, index) => {\r\n            switch (message.handle) {\r\n              case 'admin':\r\n                return <Notification key={index} message={message.text} />\r\n              default:\r\n                return <Message key={index} {...message} />\r\n            }\r\n          })\r\n        }\r\n        <div\r\n        style={{ float: 'left', clear: 'both' }}\r\n        ref={dummyScroolToBottomRef}\r\n      />\r\n      </MessagesListWrapper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messages\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst UserInputWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: 'row';\r\n    bottom: 30px;\r\n`\r\n\r\nconst InputWrapper = styled.div`\r\n    flex: 1;\r\n    input {\r\n        display: block;\r\n        border: none;\r\n        width: calc(100% - 34px);\r\n        padding: 17px;\r\n    }\r\n`\r\nconst ButtonWrapper = styled.div`\r\n    button {\r\n        padding: 10px;\r\n    }\r\n`\r\nconst UserInput = (props) => {\r\n\r\n  const {\r\n    onSendMessage = () => false\r\n  } = props\r\n\r\n  const [message, setMessage] = useState('')\r\n\r\n  const handleInputChange = (event) => {\r\n    const value = event.target.value || ''\r\n    setMessage(value)\r\n  }\r\n\r\n  const handleSend = () => {\r\n    if (!message) return \r\n    onSendMessage(message, () => setMessage(''))\r\n  }\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter' && message) {\r\n      onSendMessage(message, () => setMessage(''))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <UserInputWrapper>\r\n      <InputWrapper>\r\n        <input\r\n          value={message}\r\n          onKeyPress={handleKeyPress}\r\n          placeholder='Type your message to send here...'\r\n          onChange={handleInputChange}\r\n        />\r\n      </InputWrapper>\r\n      {/* <ButtonWrapper>\r\n        <button onClick={handleSend}>send</button>\r\n      </ButtonWrapper> */}\r\n    </UserInputWrapper>\r\n  )\r\n}\r\n\r\nexport default UserInput\r\n","import React, { useEffect, useState, createContext } from 'react'\nimport './App.css'\nimport io from 'socket.io-client'\nimport Messages from './components/messages/Messages'\nimport UserInput from './components/messages/UserInput'\nimport queryString from 'query-string'\nimport styled from 'styled-components';\n\nconst MessagesListWrapper = styled.div`\n  width: 800px;\n  margin: auto;\n  margin-top: 100px;\n`\n\nlet socket\n\nconst initialContext = {\n  handle: '',\n  channel: ''\n}\n\nexport const UserDataContext = createContext(initialContext)\n\nconst App = () => {\n  const ENDPOINT = 'https://chat-with-upen.herokuapp.com/' // 'http://localhost:4000'\n\n  const [messages, setMessages] = useState([])\n  const [selfHandle, setSelfHandle] = useState('')\n  const [channel, setSelfChannel] = useState('')\n\n  useEffect(() => {\n    socket = io(ENDPOINT)\n    const parsed = queryString.parse(window.location.search)\n    const { handle, channel } = parsed\n    setSelfHandle(handle)\n    setSelfChannel(channel)\n    console.log(parsed)\n    /*\n    * When page loads create the socket connection\n    */\n    socket.emit('join', { handle, channel }, (error, { messages }) => {\n      if (error) {\n        console.error(error)\n      }\n      setMessages(messages)\n    })\n    /*\n    * When page unloads disconnect the socket connection\n    * and turn the socket off\n    */\n    return () => {\n      socket.emit('disconnect')\n      socket.off()\n    }\n  }, [ENDPOINT])\n\n  useEffect(() => {\n    socket.on('server-message', (message) => {\n      setMessages([...(messages || []), message])\n    })\n  }, [messages])\n\n  const sendMessage = (message, callback) => {\n    socket.emit('send-message', { message }, callback)\n  }\n\n  return (\n    <UserDataContext.Provider value={{ selfHandle, channel }}>\n      <MessagesListWrapper>\n        <Messages messages={messages} />\n        <UserInput onSendMessage={sendMessage} />\n      </MessagesListWrapper>\n    </UserDataContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}